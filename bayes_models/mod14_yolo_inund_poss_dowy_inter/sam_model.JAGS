model{
  for(i in 1:N){
  # likelihood
    chl[i] ~ dnorm(mu[i], tau)
    chl.rep[i] ~ dnorm(mu[i], tau)
  # regression
    mu[i] <- B[1] +
             B[2] * Qant[i] +
             B[3] * Wtemprange_mwk[doy1999[i]] +
             B[4] * dowy[doy1999[i]] +
             Inun[inundation[doy1999[i]]] +
             Inun2[inundation[doy1999[i]]] * Wtemprange_mwk[doy1999[i]]

  # Sum antecedent components across all timesteps
   Qant[i] <- sum(qTemp[i,])

  # Create temporary antecedent variable
  # here we create index (of Q or temp or radians) multiply weight by
  # index based on days since 1999, average of next day period, etc

    # use lag of
    #for(k in 1:1){ # current day's Q
      #qTemp[i,k] <- Q[(doy1999[i])]*wA[1]
      #} if using this statement, change to k=2 in for(k in 1:nlagA)
    for(k in 1:nlagA){ # flow from lags
      qTemp[i,k] <-  mean(Q[(doy1999[i]-sum(pA[1:k])):(doy1999[i]-sum(pA[1:k])+pA[k] - 1)])*wA[k]
    }

  # part of dsum
  dsum[i] <- pow(chl[i] - chl.rep[i], 2)
  }

  # Sum of the deltas for each covariate
  sumA <- sum(deltaA[])

  # a way to avoid using ddirich distrib function in JAGS
  # use a variable drawn from gamma distrib
  # use a weight from the dirich distribution
  # use weight from that point / sum of all deltas

  # set Priors for weights using the delta trick
  #daily variable weights
  for(k in 1:nlagA){
    wA[k] <- deltaA[k]/sumA
    deltaA[k] ~ dgamma(alphaA[k],1)
  }


  # Priors for random effects
  #for(r in 1:Nstation){
  # non-identifiable random effects
    #eps[r] ~ dnorm(0, tau.eps)
  # identifable random effects
    #Estar[r] <- eps[r] - mean(eps[])
  #}

  # Diffuse normal priors for regression coefficients
  for(k in 1:4){
    B[k] ~ dnorm(0, 0.001)
    # Identifiable parameter vector
    Bstar[k] <- B[k] #+ equals(k, 1)*mean(eps[])
  }

# Priors for inundation flag effects
    Inun[1] <- 0
    Inun[2] ~ dnorm(0, 0.001)

    Inun2[1] <- 0
    Inun2[2] ~ dnorm(0, 0.001)

  # Diffuse gamma prior for observation-level precisions
  tau ~ dgamma(0.01, 0.01)
  sig <- 1/sqrt(tau)

  # Diffuse folded-t prior for random-effect standard deviation
  # Most effective for smaller number of groups
  #sig.eps ~ dt(0, 10, 2)T(0,)
  #tau.eps <- pow(sig.eps, -2)

  # posterior predictive loss
  Dsum <- sum(dsum[])
}
