model{
  for(i in 1:N){
  # likelihood
    chl[i] ~ dnorm(mu[i], tau)

  # regression
    mu[i] <- B[1] +
             B[2] * past_topped[i] +
             B[3] * Q[doy1998[i]] +
             B[4] * Qant[i] +
             B[5] * Rant[i] +
             B[6] * Tant[i] +
             Eps[station_id[i]]

  # Sum antecedent components across all timesteps
    Qant[i] <- sum(qTemp[i,])
    Rant[i] <- sum(rTemp[i,])
    Tant[i] <- sum(tTemp[i,])

  # Create temporary antecedent variable
  # here we create index (of Q or temp or radians) multiply weight by
  # index based on days since 1998, average of next day period, etc

    # use lag of
    for(k in 1:nlagA){
      qTemp[i,k] <-
        mean(Q[(doy1998[i]-k*pA[k]):(doy1998[i]-k*pA[k]+pA[k] - 1)])*wA[k]
    }

    for(k in 1:nlagB){
      rTemp[i,k] <-
        mean(Rad[(doy1998[i]-k*pB[k]):(doy1998[i]-k*pB[k]+pB[k] - 1)])*wB[k]
    }

    for(k in 1:nlagC){
      tTemp[i,k] <-
        mean(Temp[(doy1998[i]-k*pC[k]):(doy1998[i]-k*pC[k]+pC[k] - 1)])*wC[k]
    }
  }

  # Sum of the deltas for each covariate
  sumA <- sum(deltaA[])
  sumB <- sum(deltaB[])
  sumC <- sum(deltaC[])

  # a way to avoid using ddirich distrib function in JAGS
  # use a variable drawn from gamma distrib
  # use a weight from the dirich distribution
  # use weight from that point / sum of all deltas

  # set Priors for weights using the delta trick
  #daily variable weights
  for(k in 1:nlagA){
    wA[k] <- deltaA[k]/sumA
    deltaA[k] ~ dgamma(alphaA[k],1)
  }

  # for 5 time steps, need separate for loops
  for(k in 1:nlagB){
    wB[k] <- deltaB[k]/sumB
    deltaB[k] ~ dgamma(alphaB[k],1)
  }

  for(k in 1:nlagC){
    wC[k] <- deltaC[k]/sumC
    deltaC[k] ~ dgamma(alphaC[k],1)
  }

  # Priors for random effects
  for(r in 1:Nstation){
    Eps[r] ~ dnorm(0, tau.eps)
  }

  # Diffuse normal priors for regression coefficients
  for(i in 1:6){
    B[i] ~ dnorm(0, 0.001)
  }


  # Diffuse gamma priors for observation-level and random effect precisions
  tau ~ dgamma(0.01, 0.01)
  sig <- 1/sqrt(tau)

  tau.eps ~ dgamma(0.01, 0.01)
  sig.eps <- 1/sqrt(tau.eps)
}
